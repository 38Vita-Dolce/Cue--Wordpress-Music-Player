/*global _cuebarSettings:false, MediaElementPlayer:false, mejs:false */

window.cuebar = window.cuebar || {};

(function( window, $, undefined ) {
	'use strict';

	var cuebar = window.cuebar;

	function History( id, signature ) {
		var data = sessionStorage || {},
			signatureProp = id + '-signature';

		this.set = function( key, value ) {
			var prop = id + '-' + key;
			data[ prop ] = value;
		};

		this.get = function( key ) {
			var value,
				prop = id + '-' + key;

			if ( 'undefined' !== typeof data[ prop ] ) {
				value = data[ prop ];

				if ( 'currentTime' === key ) {
					value = parseFloat( value );
				} else if ( 'status' === key ) {
					value = ( 'playing' === value ) ? 'playing' : 'paused';
				} else if ( 'trackIndex' === key ) {
					value = parseInt( value, 10 );
				} else if ( 'volume' === key ) {
					value = parseFloat( value );
				}
			}

			return value;
		};

		this.clear = function() {
			var prop;

			for ( prop in data ) {
				if ( data.hasOwnProperty( prop ) && 0 === prop.indexOf( id + '-' ) ) {
					delete data[ prop ];
				}
			}
		};

		// Clear the history if the signature changed.
		if ( 'undefined' === typeof data[ signatureProp ] || data[ signatureProp ] !== signature ) {
			this.clear();
		}

		data[ signatureProp ] = signature;
	}

	$.extend( mejs.MepDefaults, {
		cuebarId: 'cuebar',
		cuebarSignature: ''
	});

	$.extend( MediaElementPlayer.prototype, {
		cuebarHistory: null,

		buildcuebarhistory: function( player, controls, layers, media ) {
			var loaded = false,
				currentTime, history;

			history = player.cuebarHistory = new History( player.options.cuebarId, player.options.cuebarSignature );
			currentTime = history.get( 'currentTime' );

			media.addEventListener( 'play', function() {
				history.set( 'trackIndex', player.cueCurrentTrack );
				history.set( 'status', 'playing' );
			});

			media.addEventListener( 'pause', function() {
				history.set( 'status', 'paused' );
			});

			media.addEventListener( 'timeupdate', function() {
				history.set( 'currentTime', media.currentTime );
			});

			media.addEventListener( 'volumechange', function() {
				history.set( 'volume', media.volume );
			});

			// Only set the current time on initial load.
			// @todo See mep-feature-sourcechooser.js
			media.addEventListener( 'loadedmetadata', function() {
				if ( ! loaded && currentTime ) {
					player.setCurrentTime( currentTime );
					player.setCurrentRail();
				}
				loaded = true;
			});
		},

		buildcuebarplayertoggle: function( player, controls, layers, media ) {
			var state = 'open',
				history = player.cuebarHistory || null,
				selectors = player.options.cueSelectors;

			if ( history ) {
				state = history.get( 'visibility' ) || 'open';
			};
		}
	});

	$.extend( cuebar, {
		settings: {
			audioVolume: 'vertical',
			cuePlaylistToggle: '',
			cueResponsiveProgress: true,
			cueSelectors: {
				playlist: '.cuebar',
				tracklist: '.cue-tracks'
			},
			cueSkin: 'cue-skin-cuebar',
			features: [
				'cuebarhistory',
				'cueartwork',
				'cuecurrentdetails',
				'cueprevioustrack',
				'playpause',
				'cuenexttrack',
				'progress',
				'current',
				'duration',
				'volume',
				'cueplaylist',
				'cueplaylisttoggle',
				'cuebarplayertoggle',
				'cueicons'
			]
		}
	});

	$( document ).ready(function( $ ) {
		var $window = $( window ),
			$toolbar = $( '#wpadminbar' ),
			$cuebar = $( '.cuebar' ),
			$tracklist = $cuebar.find( '.cue-tracks' ),
			$data = $cuebar.siblings( '.cue-playlist-data, script' ).eq( 0 ),
			cueSuccess = $.fn.cuePlaylist.defaults.success,
			data = {},
			throttle = false;

		if ( $data.length ) {
			data = JSON.parse( $data.html() );
		}

		$window.on( 'load resize orientationchange scroll', function() {
			if ( throttle ) {
				return;
			}

			throttle = true;
			setTimeout(function() {
				var windowHeight = window.innerHeight || $window.height();
				$tracklist.css( 'maxHeight', windowHeight - $toolbar.height() - $cuebar.height() + 'px' );
				throttle = false;
			}, 250 );
		});

		if ( ! ( 'cueSignature' in cuebar.settings ) && 'signature' in data ) {
			cuebar.settings.cueSignature = data.signature;
		}

		cuebar.settings.success = function( media, domObject, player ) {
			var status, volume,
				history = player.cuebarHistory || false;

			if ( history && undefined !== history.get( 'volume' ) ) {
				media.setVolume( history.get( 'volume' ) );
			}

			if ( history && undefined !== history.get( 'trackIndex' ) ) {
				status = history ? history.get( 'status' ) : '';
				player.cueSetCurrentTrack( history.get( 'trackIndex' ), ( 'playing' === status ) );
			}

			$( player.options.cueSelectors.playlist ).removeClass( 'is-loading' );

			// Call the proxied success callback.
			cueSuccess.apply( this, arguments );
		};

		// Initialize the CueBar.
		$cuebar.cuePlaylist( cuebar.settings );
	});
})( window, jQuery );

jQuery(window).load(function($) {
	jQuery('<div class="mejs-button mejs-toggle-player-button mejs-toggle-player"><button type="button" aria-controls="" title=""></button></div>').appendTo(jQuery(".cue-playlist-container .mejs-controls"));
	jQuery(".mejs-toggle-playlist-button").click(function() {
		jQuery(".cue-playlist").toggleClass("open");
	});
	jQuery(".mejs-toggle-player-button").click(function() {
		jQuery(".cue-playlist").toggleClass("is-closed");
		jQuery(".cue-playlist-container").toggleClass("playlist-closed");
	});
    
    var artwork = jQuery(".cue-playlist-container .mejs-track-artwork img").attr('src');
	jQuery(".cue-playlist-container .mejs-layers").prepend("<div class='mejs-layers-bg' style='background-image: url(" + artwork + "); background-color: rgb(51, 51, 51);' ></div>");   
	
	jQuery(".cue-playlist-container .mejs-track-artwork img").load(function() {
		src = jQuery(this).attr('src');
		jQuery('.mejs-layers-bg').css('background-image','url(' + src + ')');
	});
    
});